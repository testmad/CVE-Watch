import Vue from 'vue'
import Vuex from 'vuex'
Vue.config.devtools = true;

Vue.use(Vuex)

export default new Vuex.Store({
  state: {
    nvd: [],
    updating_nvd: false,
    lastUpdate_nvd: null,
    mitre: [],
    updating_mitre: false,
    lastUpdate_mitre: null,
    watchlist_counter: 0,
    watchLists: [],
    updating_watchList: false,
    cpes: [],
    updating_cpe: false,
    lastUpdate_cpe: null
  },
  mutations: {
    toggleNvdUpdate(state) {
      state.updating_nvd = !state.updating_nvd
      if(state.updating_nvd)
        state.nvd = []
    },
    toggleMitreUpdate(state)
    {
      state.updating_mitre = !state.updating_mitre
      if(state.updating_nvd)
        state.mitre = []
    },
    toggleWatchListUpdate(state)
    {
      state.updating_watchList = !state.updating_watchList
    },
    toggleCpeUpdate(state)
    {
      state.updating_cpe = !state.updating_cpe
    },
    addCpeItem(state, item) {
      state.cpes = item
    },
    setCpeLastUpdate(state, item) {
      state.lastUpdate_cpe = item
    },
    addNvdItem(state, item) {
      state.nvd.push(item)
    },
    addMitreItem(state, item) {
      state.mitre.push({
        id: item[0],
        description: item[1],
        published: item[2],
        modified: item[3]
      })
    },
    setNvdLastUpdate(state, item) {
      state.lastUpdate_nvd = item
    },
    setMitreLastUpdate(state, item) {
      state.lastUpdate_mitre = item
    },
    addNewWatchList(state) {
      var item = {
        id: state.watchlist_counter,
        name: 'WatchList' + state.watchlist_counter,
        cpes: [{
          hardware: [],
          applications: [],
          os: []
        }],
        isUpdating: false
      }
      state.watchLists.push(item)
      state.watchlist_counter++
    },
    importWatchList(state, item) {
      item.id = state.watchlist_counter
      state.watchLists.push(item)
      state.watchlist_counter++
    },
    deleteWatchList(state, index) {
      state.watchLists.splice(index, 1)
    },
    replaceWatchList(state, object) {
      console.log(object.watchlist.isUpdating)
      
      state.watchLists.splice(object.index, 1, object.watchlist)
    }
  },
  actions: {
    addNvdItem(context, item) {
      context.commit('addNvdItem', item)
    },
    addMitreItem(context, item) {
      context.commit('addMitreItem', item)
    },
    addCpeItem(context, item) {
      context.commit('addCpeItem', item)
    },
    setNvdLastUpdate(context, item) {
      var date = new Date(item)
      context.commit('setNvdLastUpdate', date.toString())
    },
    setMitreLastUpdate(context, item) {
      var date = new Date(item)
      context.commit('setMitreLastUpdate', date.toString())
    },
    addNewWatchList(context, item) {
      context.commit('addNewWatchList', item )
    },
    deleteWatchList(context, index) {
      context.commit('deleteWatchList', index )
    },
    importWatchList(context, item) {
      item.forEach(entry => {
        context.commit('importWatchList', entry)
      });
    },
    setCpeLastUpdate(context, item) {
      var date = new Date(item)
      context.commit('setCpeLastUpdate', date.toString())
    },
    replaceWatchList(context, object) {
      context.commit('replaceWatchList', object)
    }
  },
  getters: {
    getNvdUpdateStatus: state => {
      return state.updating_nvd
    },
    getMitreUpdateStatus: state => {
      return state.updating_mitre
    },
    getWatchListUpdateStatus: state => {
      return state.updating_watchList
    },
    getNvdLastUpdate: state => {
      return state.lastUpdate_nvd
    },
    getMitreLastUpdate: state => {
      return state.lastUpdate_mitre
    },
    getWatchListById: state => id => {
      return state.watchLists.find(watchlist => watchlist.id === id)
    },
    getCpeLastUpdate: state => {
      return state.lastUpdate_nvd
    },
    getCpeUpdateStatus: state => {
      return state.updating_mitre
    }
  }
})
